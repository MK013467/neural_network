N = 900; % Number of neurons
P_values = [1, 5, 10, 20, 30, 40]; 
maxIterations = 100; % Maximum number of iterations for convergence

% Loop over different values of P
for P = P_values
    % Initialize weights matrix
    W = zeros(N, N);
    
    % Memorize P patterns
    for p = 1:P
        xi = pictures(:, p);
        W = W + xi * xi';
    end
    W = W / N;
    W(1:N+1:end) = 0; % No self-connections
    
    % Random initial state
    S = sign(randn(N, 1));
    initialS = S; % Store initial state for plotting
    
    energyHistory = [calculateEnergy(W, S)];
    
    % Update the network until convergence or max iterations
    for iter = 1:maxIterations
        S = updateState(W, S);
        energyHistory(end+1) = calculateEnergy(W, S);
        
        % Check for convergence (optional)
        if iter > 1 && energyHistory(end) == energyHistory(end-1)
            break; % Break if energy hasn't changed (converged)
        end
    end
    
    % Plotting
    figure;
    subplot(1, 3, 1);
    imagesc(reshape(initialS, 30, 30)); colormap gray; title(['Initial State, P=', num2str(P)]);
    subplot(1, 3, 2);
    imagesc(reshape(S, 30, 30)); colormap gray; title(['Final State, P=', num2str(P)]);
    subplot(1, 3, 3);
    plot(energyHistory); title('Energy over Time'); xlabel('Time Step'); ylabel('Energy');
end

% Local functions
function S_new = updateState(W, S)
    S_new = sign(W * S);
    S_new(S_new == 0) = 1; % Handle 0s if any
end

function E = calculateEnergy(W, S)
    E = -0.5 * S' * W * S;
end
